class JSONEmailTemplateTranslator:
    """Translates JSON files while preserving structure"""

    def __init__(self, content_str: str, azure_translator, technique=None):
        """
        Initialize the JSON translator

        :param content_str: JSON content as a string
        :param azure_translator: Translator instance
        :param technique: Translation technique (azure_translator, azure_openai, etc.)
        """
        self.content = content_str
        self.translator = azure_translator
        self.technique = technique
        self.data = json.loads(content_str)
        
        # Initialize translatable key patterns
        self.translatable_key_patterns = [
            'title', 'description', 'name', 'label',
            'section', 'question', 'option', 'header', 
            'text', 'content', 'subject', 'message'
        ]

    def is_text_like(self, value: Any) -> bool:
        """
        Determine if a value should be considered translatable text.
        """
        if not isinstance(value, str):
            return False
        value = value.strip()
        if not value:
            return False
        if value.isnumeric() or len(value) < 3:
            return False
        return True

    def is_translatable_key(self, key: str) -> bool:
        """
        Determine if a key is associated with translatable content.
        
        :param key: Key to check
        :return: Boolean indicating if the key is associated with translatable content
        """
        # Ignore technical keys
        ignore_patterns = [
            'id', 'uuid', 'code', 'type',
            '_', 'timestamp', 'version'
        ]

        key_lower = key.lower()

        # Check if key contains any translatable patterns
        return any(
            pattern in key_lower
            for pattern in self.translatable_key_patterns
        ) and not any(
            pattern in key_lower
            for pattern in ignore_patterns
        )

    def _translate_recursive(self, obj: Any, target_language: str) -> Any:
        """
        Recursively translate JSON content while preserving structure
        
        :param obj: JSON object (dict, list, or primitive)
        :param target_language: Target language code
        :return: Translated JSON object
        """
        # Handle dictionaries
        if isinstance(obj, dict):
            translated_dict = {}
            for key, value in obj.items():
                # Recursively translate value
                translated_value = self._translate_recursive(value, target_language)
                translated_dict[key] = translated_value
            return translated_dict
        
        # Handle lists
        elif isinstance(obj, list):
            return [self._translate_recursive(item, target_language) for item in obj]
        
        # Handle text-like strings
        elif isinstance(obj, str) and self.is_text_like(obj):
            # If technique supports source language detection
            if self.technique == "azure_openai":
                source_lang = self.translator.detect_language(obj)
                return self.translator.translate(obj, target_language, source_lang)
            else:
                return self.translator.translate(obj, target_language)
        
        # For other types, return as-is
        return obj

    def translate_template(self, target_language: str, output_path: str = None) -> None:
        """
        Translate the entire JSON template to the target language and save to a new file
        
        :param target_language: Target language code
        :param output_path: Path to save the translated file
        """
        # Create a deep copy of the original data to avoid modifying the original
        translated_data = copy.deepcopy(self.data)
        
        # Translate the entire JSON content
        translated_data = self._translate_recursive(translated_data, target_language)
        
        # Save the translated template
        with open(output_path, 'w', encoding='utf-8') as f:
            json.dump(translated_data, f, ensure_ascii=False, indent=2)
        
        print(f"Translated template saved to: {output_path}")
